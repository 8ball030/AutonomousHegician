/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ChainlinkedInterface extends Interface {
  functions: {};

  events: {
    ChainlinkRequested: TypedEventDescription<{
      encodeTopics([id]: [Arrayish | null]): string[];
    }>;

    ChainlinkFulfilled: TypedEventDescription<{
      encodeTopics([id]: [Arrayish | null]): string[];
    }>;

    ChainlinkCancelled: TypedEventDescription<{
      encodeTopics([id]: [Arrayish | null]): string[];
    }>;
  };
}

export class Chainlinked extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Chainlinked;
  attach(addressOrName: string): Chainlinked;
  deployed(): Promise<Chainlinked>;

  on(event: EventFilter | string, listener: Listener): Chainlinked;
  once(event: EventFilter | string, listener: Listener): Chainlinked;
  addListener(eventName: EventFilter | string, listener: Listener): Chainlinked;
  removeAllListeners(eventName: EventFilter | string): Chainlinked;
  removeListener(eventName: any, listener: Listener): Chainlinked;

  interface: ChainlinkedInterface;

  functions: {};

  filters: {
    ChainlinkRequested(id: Arrayish | null): EventFilter;

    ChainlinkFulfilled(id: Arrayish | null): EventFilter;

    ChainlinkCancelled(id: Arrayish | null): EventFilter;
  };

  estimate: {};
}
