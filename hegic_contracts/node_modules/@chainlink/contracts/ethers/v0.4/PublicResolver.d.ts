/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface PublicResolverInterface extends Interface {
  functions: {
    supportsInterface: TypedFunctionDescription<{
      encode([interfaceID]: [Arrayish]): string;
    }>;

    setText: TypedFunctionDescription<{
      encode([node, key, value]: [Arrayish, string, string]): string;
    }>;

    ABI: TypedFunctionDescription<{
      encode([node, contentTypes]: [Arrayish, BigNumberish]): string;
    }>;

    setPubkey: TypedFunctionDescription<{
      encode([node, x, y]: [Arrayish, Arrayish, Arrayish]): string;
    }>;

    content: TypedFunctionDescription<{ encode([node]: [Arrayish]): string }>;

    addr: TypedFunctionDescription<{ encode([node]: [Arrayish]): string }>;

    text: TypedFunctionDescription<{
      encode([node, key]: [Arrayish, string]): string;
    }>;

    setABI: TypedFunctionDescription<{
      encode([node, contentType, data]: [
        Arrayish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    name: TypedFunctionDescription<{ encode([node]: [Arrayish]): string }>;

    setName: TypedFunctionDescription<{
      encode([node, name]: [Arrayish, string]): string;
    }>;

    setMultihash: TypedFunctionDescription<{
      encode([node, hash]: [Arrayish, Arrayish]): string;
    }>;

    setContent: TypedFunctionDescription<{
      encode([node, hash]: [Arrayish, Arrayish]): string;
    }>;

    pubkey: TypedFunctionDescription<{ encode([node]: [Arrayish]): string }>;

    setAddr: TypedFunctionDescription<{
      encode([node, addr]: [Arrayish, string]): string;
    }>;

    multihash: TypedFunctionDescription<{ encode([node]: [Arrayish]): string }>;
  };

  events: {
    AddrChanged: TypedEventDescription<{
      encodeTopics([node, a]: [Arrayish | null, null]): string[];
    }>;

    ContentChanged: TypedEventDescription<{
      encodeTopics([node, hash]: [Arrayish | null, null]): string[];
    }>;

    NameChanged: TypedEventDescription<{
      encodeTopics([node, name]: [Arrayish | null, null]): string[];
    }>;

    ABIChanged: TypedEventDescription<{
      encodeTopics([node, contentType]: [
        Arrayish | null,
        BigNumberish | null
      ]): string[];
    }>;

    PubkeyChanged: TypedEventDescription<{
      encodeTopics([node, x, y]: [Arrayish | null, null, null]): string[];
    }>;

    TextChanged: TypedEventDescription<{
      encodeTopics([node, indexedKey, key]: [
        Arrayish | null,
        null,
        null
      ]): string[];
    }>;

    MultihashChanged: TypedEventDescription<{
      encodeTopics([node, hash]: [Arrayish | null, null]): string[];
    }>;
  };
}

export class PublicResolver extends Contract {
  connect(signerOrProvider: Signer | Provider | string): PublicResolver;
  attach(addressOrName: string): PublicResolver;
  deployed(): Promise<PublicResolver>;

  on(event: EventFilter | string, listener: Listener): PublicResolver;
  once(event: EventFilter | string, listener: Listener): PublicResolver;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): PublicResolver;
  removeAllListeners(eventName: EventFilter | string): PublicResolver;
  removeListener(eventName: any, listener: Listener): PublicResolver;

  interface: PublicResolverInterface;

  functions: {
    supportsInterface(interfaceID: Arrayish): Promise<boolean>;

    setText(
      node: Arrayish,
      key: string,
      value: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    ABI(
      node: Arrayish,
      contentTypes: BigNumberish
    ): Promise<{
      contentType: BigNumber;
      data: string;
      0: BigNumber;
      1: string;
    }>;

    setPubkey(
      node: Arrayish,
      x: Arrayish,
      y: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    content(node: Arrayish): Promise<string>;

    addr(node: Arrayish): Promise<string>;

    text(node: Arrayish, key: string): Promise<string>;

    setABI(
      node: Arrayish,
      contentType: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    name(node: Arrayish): Promise<string>;

    setName(
      node: Arrayish,
      name: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setMultihash(
      node: Arrayish,
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setContent(
      node: Arrayish,
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    pubkey(
      node: Arrayish
    ): Promise<{
      x: string;
      y: string;
      0: string;
      1: string;
    }>;

    setAddr(
      node: Arrayish,
      addr: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    multihash(node: Arrayish): Promise<string>;
  };

  supportsInterface(interfaceID: Arrayish): Promise<boolean>;

  setText(
    node: Arrayish,
    key: string,
    value: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  ABI(
    node: Arrayish,
    contentTypes: BigNumberish
  ): Promise<{
    contentType: BigNumber;
    data: string;
    0: BigNumber;
    1: string;
  }>;

  setPubkey(
    node: Arrayish,
    x: Arrayish,
    y: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  content(node: Arrayish): Promise<string>;

  addr(node: Arrayish): Promise<string>;

  text(node: Arrayish, key: string): Promise<string>;

  setABI(
    node: Arrayish,
    contentType: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  name(node: Arrayish): Promise<string>;

  setName(
    node: Arrayish,
    name: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setMultihash(
    node: Arrayish,
    hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setContent(
    node: Arrayish,
    hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  pubkey(
    node: Arrayish
  ): Promise<{
    x: string;
    y: string;
    0: string;
    1: string;
  }>;

  setAddr(
    node: Arrayish,
    addr: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  multihash(node: Arrayish): Promise<string>;

  filters: {
    AddrChanged(node: Arrayish | null, a: null): EventFilter;

    ContentChanged(node: Arrayish | null, hash: null): EventFilter;

    NameChanged(node: Arrayish | null, name: null): EventFilter;

    ABIChanged(
      node: Arrayish | null,
      contentType: BigNumberish | null
    ): EventFilter;

    PubkeyChanged(node: Arrayish | null, x: null, y: null): EventFilter;

    TextChanged(
      node: Arrayish | null,
      indexedKey: null,
      key: null
    ): EventFilter;

    MultihashChanged(node: Arrayish | null, hash: null): EventFilter;
  };

  estimate: {
    supportsInterface(interfaceID: Arrayish): Promise<BigNumber>;

    setText(node: Arrayish, key: string, value: string): Promise<BigNumber>;

    ABI(node: Arrayish, contentTypes: BigNumberish): Promise<BigNumber>;

    setPubkey(node: Arrayish, x: Arrayish, y: Arrayish): Promise<BigNumber>;

    content(node: Arrayish): Promise<BigNumber>;

    addr(node: Arrayish): Promise<BigNumber>;

    text(node: Arrayish, key: string): Promise<BigNumber>;

    setABI(
      node: Arrayish,
      contentType: BigNumberish,
      data: Arrayish
    ): Promise<BigNumber>;

    name(node: Arrayish): Promise<BigNumber>;

    setName(node: Arrayish, name: string): Promise<BigNumber>;

    setMultihash(node: Arrayish, hash: Arrayish): Promise<BigNumber>;

    setContent(node: Arrayish, hash: Arrayish): Promise<BigNumber>;

    pubkey(node: Arrayish): Promise<BigNumber>;

    setAddr(node: Arrayish, addr: string): Promise<BigNumber>;

    multihash(node: Arrayish): Promise<BigNumber>;
  };
}
