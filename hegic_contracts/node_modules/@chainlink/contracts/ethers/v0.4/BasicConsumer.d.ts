/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface BasicConsumerInterface extends Interface {
  functions: {
    fulfill: TypedFunctionDescription<{
      encode([_requestId, _price]: [Arrayish, Arrayish]): string;
    }>;

    requestEthereumPrice: TypedFunctionDescription<{
      encode([_currency]: [string]): string;
    }>;

    withdrawLink: TypedFunctionDescription<{ encode([]: []): string }>;

    currentPrice: TypedFunctionDescription<{ encode([]: []): string }>;

    cancelRequest: TypedFunctionDescription<{
      encode([_requestId, _payment, _callbackFunctionId, _expiration]: [
        Arrayish,
        BigNumberish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;
  };

  events: {
    RequestFulfilled: TypedEventDescription<{
      encodeTopics([requestId, price]: [
        Arrayish | null,
        Arrayish | null
      ]): string[];
    }>;

    ChainlinkRequested: TypedEventDescription<{
      encodeTopics([id]: [Arrayish | null]): string[];
    }>;

    ChainlinkFulfilled: TypedEventDescription<{
      encodeTopics([id]: [Arrayish | null]): string[];
    }>;

    ChainlinkCancelled: TypedEventDescription<{
      encodeTopics([id]: [Arrayish | null]): string[];
    }>;
  };
}

export class BasicConsumer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): BasicConsumer;
  attach(addressOrName: string): BasicConsumer;
  deployed(): Promise<BasicConsumer>;

  on(event: EventFilter | string, listener: Listener): BasicConsumer;
  once(event: EventFilter | string, listener: Listener): BasicConsumer;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): BasicConsumer;
  removeAllListeners(eventName: EventFilter | string): BasicConsumer;
  removeListener(eventName: any, listener: Listener): BasicConsumer;

  interface: BasicConsumerInterface;

  functions: {
    fulfill(
      _requestId: Arrayish,
      _price: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    requestEthereumPrice(
      _currency: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawLink(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    currentPrice(): Promise<string>;

    cancelRequest(
      _requestId: Arrayish,
      _payment: BigNumberish,
      _callbackFunctionId: Arrayish,
      _expiration: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  fulfill(
    _requestId: Arrayish,
    _price: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  requestEthereumPrice(
    _currency: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdrawLink(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  currentPrice(): Promise<string>;

  cancelRequest(
    _requestId: Arrayish,
    _payment: BigNumberish,
    _callbackFunctionId: Arrayish,
    _expiration: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    RequestFulfilled(
      requestId: Arrayish | null,
      price: Arrayish | null
    ): EventFilter;

    ChainlinkRequested(id: Arrayish | null): EventFilter;

    ChainlinkFulfilled(id: Arrayish | null): EventFilter;

    ChainlinkCancelled(id: Arrayish | null): EventFilter;
  };

  estimate: {
    fulfill(_requestId: Arrayish, _price: Arrayish): Promise<BigNumber>;

    requestEthereumPrice(_currency: string): Promise<BigNumber>;

    withdrawLink(): Promise<BigNumber>;

    currentPrice(): Promise<BigNumber>;

    cancelRequest(
      _requestId: Arrayish,
      _payment: BigNumberish,
      _callbackFunctionId: Arrayish,
      _expiration: BigNumberish
    ): Promise<BigNumber>;
  };
}
