/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface OracleInterfaceInterface extends Interface {
  functions: {
    fulfillOracleRequest: TypedFunctionDescription<{
      encode([
        requestId,
        payment,
        callbackAddress,
        callbackFunctionId,
        expiration,
        data
      ]: [
        Arrayish,
        BigNumberish,
        string,
        Arrayish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    withdrawable: TypedFunctionDescription<{ encode([]: []): string }>;

    setFulfillmentPermission: TypedFunctionDescription<{
      encode([node, allowed]: [string, boolean]): string;
    }>;

    getAuthorizationStatus: TypedFunctionDescription<{
      encode([node]: [string]): string;
    }>;

    withdraw: TypedFunctionDescription<{
      encode([recipient, amount]: [string, BigNumberish]): string;
    }>;
  };

  events: {};
}

export class OracleInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): OracleInterface;
  attach(addressOrName: string): OracleInterface;
  deployed(): Promise<OracleInterface>;

  on(event: EventFilter | string, listener: Listener): OracleInterface;
  once(event: EventFilter | string, listener: Listener): OracleInterface;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): OracleInterface;
  removeAllListeners(eventName: EventFilter | string): OracleInterface;
  removeListener(eventName: any, listener: Listener): OracleInterface;

  interface: OracleInterfaceInterface;

  functions: {
    fulfillOracleRequest(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      expiration: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawable(): Promise<BigNumber>;

    setFulfillmentPermission(
      node: string,
      allowed: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getAuthorizationStatus(node: string): Promise<boolean>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  fulfillOracleRequest(
    requestId: Arrayish,
    payment: BigNumberish,
    callbackAddress: string,
    callbackFunctionId: Arrayish,
    expiration: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdrawable(): Promise<BigNumber>;

  setFulfillmentPermission(
    node: string,
    allowed: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getAuthorizationStatus(node: string): Promise<boolean>;

  withdraw(
    recipient: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    fulfillOracleRequest(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      expiration: BigNumberish,
      data: Arrayish
    ): Promise<BigNumber>;

    withdrawable(): Promise<BigNumber>;

    setFulfillmentPermission(
      node: string,
      allowed: boolean
    ): Promise<BigNumber>;

    getAuthorizationStatus(node: string): Promise<BigNumber>;

    withdraw(recipient: string, amount: BigNumberish): Promise<BigNumber>;
  };
}
