/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ENSRegistryInterface extends Interface {
  functions: {
    resolver: TypedFunctionDescription<{ encode([node]: [Arrayish]): string }>;

    owner: TypedFunctionDescription<{ encode([node]: [Arrayish]): string }>;

    setSubnodeOwner: TypedFunctionDescription<{
      encode([node, label, owner]: [Arrayish, Arrayish, string]): string;
    }>;

    setTTL: TypedFunctionDescription<{
      encode([node, ttl]: [Arrayish, BigNumberish]): string;
    }>;

    ttl: TypedFunctionDescription<{ encode([node]: [Arrayish]): string }>;

    setResolver: TypedFunctionDescription<{
      encode([node, resolver]: [Arrayish, string]): string;
    }>;

    setOwner: TypedFunctionDescription<{
      encode([node, owner]: [Arrayish, string]): string;
    }>;
  };

  events: {
    NewOwner: TypedEventDescription<{
      encodeTopics([node, label, owner]: [
        Arrayish | null,
        Arrayish | null,
        null
      ]): string[];
    }>;

    Transfer: TypedEventDescription<{
      encodeTopics([node, owner]: [Arrayish | null, null]): string[];
    }>;

    NewResolver: TypedEventDescription<{
      encodeTopics([node, resolver]: [Arrayish | null, null]): string[];
    }>;

    NewTTL: TypedEventDescription<{
      encodeTopics([node, ttl]: [Arrayish | null, null]): string[];
    }>;
  };
}

export class ENSRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ENSRegistry;
  attach(addressOrName: string): ENSRegistry;
  deployed(): Promise<ENSRegistry>;

  on(event: EventFilter | string, listener: Listener): ENSRegistry;
  once(event: EventFilter | string, listener: Listener): ENSRegistry;
  addListener(eventName: EventFilter | string, listener: Listener): ENSRegistry;
  removeAllListeners(eventName: EventFilter | string): ENSRegistry;
  removeListener(eventName: any, listener: Listener): ENSRegistry;

  interface: ENSRegistryInterface;

  functions: {
    resolver(node: Arrayish): Promise<string>;

    owner(node: Arrayish): Promise<string>;

    setSubnodeOwner(
      node: Arrayish,
      label: Arrayish,
      owner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setTTL(
      node: Arrayish,
      ttl: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    ttl(node: Arrayish): Promise<BigNumber>;

    setResolver(
      node: Arrayish,
      resolver: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setOwner(
      node: Arrayish,
      owner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  resolver(node: Arrayish): Promise<string>;

  owner(node: Arrayish): Promise<string>;

  setSubnodeOwner(
    node: Arrayish,
    label: Arrayish,
    owner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setTTL(
    node: Arrayish,
    ttl: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  ttl(node: Arrayish): Promise<BigNumber>;

  setResolver(
    node: Arrayish,
    resolver: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setOwner(
    node: Arrayish,
    owner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    NewOwner(
      node: Arrayish | null,
      label: Arrayish | null,
      owner: null
    ): EventFilter;

    Transfer(node: Arrayish | null, owner: null): EventFilter;

    NewResolver(node: Arrayish | null, resolver: null): EventFilter;

    NewTTL(node: Arrayish | null, ttl: null): EventFilter;
  };

  estimate: {
    resolver(node: Arrayish): Promise<BigNumber>;

    owner(node: Arrayish): Promise<BigNumber>;

    setSubnodeOwner(
      node: Arrayish,
      label: Arrayish,
      owner: string
    ): Promise<BigNumber>;

    setTTL(node: Arrayish, ttl: BigNumberish): Promise<BigNumber>;

    ttl(node: Arrayish): Promise<BigNumber>;

    setResolver(node: Arrayish, resolver: string): Promise<BigNumber>;

    setOwner(node: Arrayish, owner: string): Promise<BigNumber>;
  };
}
