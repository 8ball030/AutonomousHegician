/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface MedianTestHelperInterface extends Interface {
  functions: {
    publicGet: TypedFunctionDescription<{
      encode([list]: [BigNumberish[]]): string;
    }>;

    publicQuickselectTwo: TypedFunctionDescription<{
      encode([list, k1, k2]: [
        BigNumberish[],
        BigNumberish,
        BigNumberish
      ]): string;
    }>;
  };

  events: {};
}

export class MedianTestHelper extends Contract {
  connect(signerOrProvider: Signer | Provider | string): MedianTestHelper;
  attach(addressOrName: string): MedianTestHelper;
  deployed(): Promise<MedianTestHelper>;

  on(event: EventFilter | string, listener: Listener): MedianTestHelper;
  once(event: EventFilter | string, listener: Listener): MedianTestHelper;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): MedianTestHelper;
  removeAllListeners(eventName: EventFilter | string): MedianTestHelper;
  removeListener(eventName: any, listener: Listener): MedianTestHelper;

  interface: MedianTestHelperInterface;

  functions: {
    publicGet(list: BigNumberish[]): Promise<BigNumber>;

    publicQuickselectTwo(
      list: BigNumberish[],
      k1: BigNumberish,
      k2: BigNumberish
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;
  };

  publicGet(list: BigNumberish[]): Promise<BigNumber>;

  publicQuickselectTwo(
    list: BigNumberish[],
    k1: BigNumberish,
    k2: BigNumberish
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  filters: {};

  estimate: {
    publicGet(list: BigNumberish[]): Promise<BigNumber>;

    publicQuickselectTwo(
      list: BigNumberish[],
      k1: BigNumberish,
      k2: BigNumberish
    ): Promise<BigNumber>;
  };
}
