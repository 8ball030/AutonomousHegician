/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface LinkTokenInterfaceInterface extends Interface {
  functions: {
    name: TypedFunctionDescription<{ encode([]: []): string }>;

    approve: TypedFunctionDescription<{
      encode([spender, value]: [string, BigNumberish]): string;
    }>;

    totalSupply: TypedFunctionDescription<{ encode([]: []): string }>;

    transferFrom: TypedFunctionDescription<{
      encode([from, to, value]: [string, string, BigNumberish]): string;
    }>;

    decimals: TypedFunctionDescription<{ encode([]: []): string }>;

    transferAndCall: TypedFunctionDescription<{
      encode([to, value, data]: [string, BigNumberish, Arrayish]): string;
    }>;

    decreaseApproval: TypedFunctionDescription<{
      encode([spender, addedValue]: [string, BigNumberish]): string;
    }>;

    balanceOf: TypedFunctionDescription<{ encode([owner]: [string]): string }>;

    symbol: TypedFunctionDescription<{ encode([]: []): string }>;

    transfer: TypedFunctionDescription<{
      encode([to, value]: [string, BigNumberish]): string;
    }>;

    increaseApproval: TypedFunctionDescription<{
      encode([spender, subtractedValue]: [string, BigNumberish]): string;
    }>;

    allowance: TypedFunctionDescription<{
      encode([owner, spender]: [string, string]): string;
    }>;
  };

  events: {};
}

export class LinkTokenInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): LinkTokenInterface;
  attach(addressOrName: string): LinkTokenInterface;
  deployed(): Promise<LinkTokenInterface>;

  on(event: EventFilter | string, listener: Listener): LinkTokenInterface;
  once(event: EventFilter | string, listener: Listener): LinkTokenInterface;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): LinkTokenInterface;
  removeAllListeners(eventName: EventFilter | string): LinkTokenInterface;
  removeListener(eventName: any, listener: Listener): LinkTokenInterface;

  interface: LinkTokenInterfaceInterface;

  functions: {
    name(): Promise<string>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    totalSupply(): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    decimals(): Promise<number>;

    transferAndCall(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    decreaseApproval(
      spender: string,
      addedValue: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    balanceOf(owner: string): Promise<BigNumber>;

    symbol(): Promise<string>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    increaseApproval(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    allowance(owner: string, spender: string): Promise<BigNumber>;
  };

  name(): Promise<string>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  totalSupply(): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  decimals(): Promise<number>;

  transferAndCall(
    to: string,
    value: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  decreaseApproval(
    spender: string,
    addedValue: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  balanceOf(owner: string): Promise<BigNumber>;

  symbol(): Promise<string>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  increaseApproval(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  allowance(owner: string, spender: string): Promise<BigNumber>;

  filters: {};

  estimate: {
    name(): Promise<BigNumber>;

    approve(spender: string, value: BigNumberish): Promise<BigNumber>;

    totalSupply(): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish
    ): Promise<BigNumber>;

    decimals(): Promise<BigNumber>;

    transferAndCall(
      to: string,
      value: BigNumberish,
      data: Arrayish
    ): Promise<BigNumber>;

    decreaseApproval(
      spender: string,
      addedValue: BigNumberish
    ): Promise<BigNumber>;

    balanceOf(owner: string): Promise<BigNumber>;

    symbol(): Promise<BigNumber>;

    transfer(to: string, value: BigNumberish): Promise<BigNumber>;

    increaseApproval(
      spender: string,
      subtractedValue: BigNumberish
    ): Promise<BigNumber>;

    allowance(owner: string, spender: string): Promise<BigNumber>;
  };
}
