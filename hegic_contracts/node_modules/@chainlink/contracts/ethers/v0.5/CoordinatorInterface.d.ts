/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface CoordinatorInterfaceInterface extends Interface {
  functions: {
    fulfillOracleRequest: TypedFunctionDescription<{
      encode([_requestId, _aggregatorArgs]: [Arrayish, Arrayish]): string;
    }>;

    initiateServiceAgreement: TypedFunctionDescription<{
      encode([_serviceAgreementData, _oracleSignaturesData]: [
        Arrayish,
        Arrayish
      ]): string;
    }>;
  };

  events: {};
}

export class CoordinatorInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): CoordinatorInterface;
  attach(addressOrName: string): CoordinatorInterface;
  deployed(): Promise<CoordinatorInterface>;

  on(event: EventFilter | string, listener: Listener): CoordinatorInterface;
  once(event: EventFilter | string, listener: Listener): CoordinatorInterface;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): CoordinatorInterface;
  removeAllListeners(eventName: EventFilter | string): CoordinatorInterface;
  removeListener(eventName: any, listener: Listener): CoordinatorInterface;

  interface: CoordinatorInterfaceInterface;

  functions: {
    fulfillOracleRequest(
      _requestId: Arrayish,
      _aggregatorArgs: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    initiateServiceAgreement(
      _serviceAgreementData: Arrayish,
      _oracleSignaturesData: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  fulfillOracleRequest(
    _requestId: Arrayish,
    _aggregatorArgs: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  initiateServiceAgreement(
    _serviceAgreementData: Arrayish,
    _oracleSignaturesData: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    fulfillOracleRequest(
      _requestId: Arrayish,
      _aggregatorArgs: Arrayish
    ): Promise<BigNumber>;

    initiateServiceAgreement(
      _serviceAgreementData: Arrayish,
      _oracleSignaturesData: Arrayish
    ): Promise<BigNumber>;
  };
}
