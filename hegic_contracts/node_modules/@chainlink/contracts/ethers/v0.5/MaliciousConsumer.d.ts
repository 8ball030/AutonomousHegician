/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface MaliciousConsumerInterface extends Interface {
  functions: {
    doesNothing: TypedFunctionDescription<{
      encode([,]: [Arrayish, Arrayish]): string;
    }>;

    stealEthCall: TypedFunctionDescription<{
      encode([_requestId]: [Arrayish, Arrayish]): string;
    }>;

    remove: TypedFunctionDescription<{ encode([]: []): string }>;

    stealEthSend: TypedFunctionDescription<{
      encode([_requestId]: [Arrayish, Arrayish]): string;
    }>;

    cancelRequestOnFulfill: TypedFunctionDescription<{
      encode([_requestId]: [Arrayish, Arrayish]): string;
    }>;

    stealEthTransfer: TypedFunctionDescription<{
      encode([_requestId]: [Arrayish, Arrayish]): string;
    }>;

    requestData: TypedFunctionDescription<{
      encode([_id, _callbackFunc]: [Arrayish, Arrayish]): string;
    }>;

    assertFail: TypedFunctionDescription<{
      encode([,]: [Arrayish, Arrayish]): string;
    }>;
  };

  events: {
    ChainlinkRequested: TypedEventDescription<{
      encodeTopics([id]: [Arrayish | null]): string[];
    }>;

    ChainlinkFulfilled: TypedEventDescription<{
      encodeTopics([id]: [Arrayish | null]): string[];
    }>;

    ChainlinkCancelled: TypedEventDescription<{
      encodeTopics([id]: [Arrayish | null]): string[];
    }>;
  };
}

export class MaliciousConsumer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): MaliciousConsumer;
  attach(addressOrName: string): MaliciousConsumer;
  deployed(): Promise<MaliciousConsumer>;

  on(event: EventFilter | string, listener: Listener): MaliciousConsumer;
  once(event: EventFilter | string, listener: Listener): MaliciousConsumer;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): MaliciousConsumer;
  removeAllListeners(eventName: EventFilter | string): MaliciousConsumer;
  removeListener(eventName: any, listener: Listener): MaliciousConsumer;

  interface: MaliciousConsumerInterface;

  functions: {
    doesNothing(arg0: Arrayish, arg1: Arrayish): Promise<void>;

    stealEthCall(
      _requestId: Arrayish,
      arg1: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    remove(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    stealEthSend(
      _requestId: Arrayish,
      arg1: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    cancelRequestOnFulfill(
      _requestId: Arrayish,
      arg1: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    stealEthTransfer(
      _requestId: Arrayish,
      arg1: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    requestData(
      _id: Arrayish,
      _callbackFunc: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    assertFail(arg0: Arrayish, arg1: Arrayish): Promise<void>;
  };

  doesNothing(arg0: Arrayish, arg1: Arrayish): Promise<void>;

  stealEthCall(
    _requestId: Arrayish,
    arg1: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  remove(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  stealEthSend(
    _requestId: Arrayish,
    arg1: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  cancelRequestOnFulfill(
    _requestId: Arrayish,
    arg1: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  stealEthTransfer(
    _requestId: Arrayish,
    arg1: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  requestData(
    _id: Arrayish,
    _callbackFunc: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  assertFail(arg0: Arrayish, arg1: Arrayish): Promise<void>;

  filters: {
    ChainlinkRequested(id: Arrayish | null): EventFilter;

    ChainlinkFulfilled(id: Arrayish | null): EventFilter;

    ChainlinkCancelled(id: Arrayish | null): EventFilter;
  };

  estimate: {
    doesNothing(arg0: Arrayish, arg1: Arrayish): Promise<BigNumber>;

    stealEthCall(_requestId: Arrayish, arg1: Arrayish): Promise<BigNumber>;

    remove(): Promise<BigNumber>;

    stealEthSend(_requestId: Arrayish, arg1: Arrayish): Promise<BigNumber>;

    cancelRequestOnFulfill(
      _requestId: Arrayish,
      arg1: Arrayish
    ): Promise<BigNumber>;

    stealEthTransfer(_requestId: Arrayish, arg1: Arrayish): Promise<BigNumber>;

    requestData(_id: Arrayish, _callbackFunc: Arrayish): Promise<BigNumber>;

    assertFail(arg0: Arrayish, arg1: Arrayish): Promise<BigNumber>;
  };
}
