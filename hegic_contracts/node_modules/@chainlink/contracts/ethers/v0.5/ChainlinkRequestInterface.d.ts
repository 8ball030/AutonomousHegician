/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ChainlinkRequestInterfaceInterface extends Interface {
  functions: {
    oracleRequest: TypedFunctionDescription<{
      encode([
        sender,
        requestPrice,
        serviceAgreementID,
        callbackAddress,
        callbackFunctionId,
        nonce,
        dataVersion,
        data
      ]: [
        string,
        BigNumberish,
        Arrayish,
        string,
        Arrayish,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    cancelOracleRequest: TypedFunctionDescription<{
      encode([requestId, payment, callbackFunctionId, expiration]: [
        Arrayish,
        BigNumberish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;
  };

  events: {};
}

export class ChainlinkRequestInterface extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): ChainlinkRequestInterface;
  attach(addressOrName: string): ChainlinkRequestInterface;
  deployed(): Promise<ChainlinkRequestInterface>;

  on(
    event: EventFilter | string,
    listener: Listener
  ): ChainlinkRequestInterface;
  once(
    event: EventFilter | string,
    listener: Listener
  ): ChainlinkRequestInterface;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ChainlinkRequestInterface;
  removeAllListeners(
    eventName: EventFilter | string
  ): ChainlinkRequestInterface;
  removeListener(eventName: any, listener: Listener): ChainlinkRequestInterface;

  interface: ChainlinkRequestInterfaceInterface;

  functions: {
    oracleRequest(
      sender: string,
      requestPrice: BigNumberish,
      serviceAgreementID: Arrayish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      nonce: BigNumberish,
      dataVersion: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    cancelOracleRequest(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackFunctionId: Arrayish,
      expiration: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  oracleRequest(
    sender: string,
    requestPrice: BigNumberish,
    serviceAgreementID: Arrayish,
    callbackAddress: string,
    callbackFunctionId: Arrayish,
    nonce: BigNumberish,
    dataVersion: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  cancelOracleRequest(
    requestId: Arrayish,
    payment: BigNumberish,
    callbackFunctionId: Arrayish,
    expiration: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    oracleRequest(
      sender: string,
      requestPrice: BigNumberish,
      serviceAgreementID: Arrayish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      nonce: BigNumberish,
      dataVersion: BigNumberish,
      data: Arrayish
    ): Promise<BigNumber>;

    cancelOracleRequest(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackFunctionId: Arrayish,
      expiration: BigNumberish
    ): Promise<BigNumber>;
  };
}
