/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface SchnorrSECP256K1Interface extends Interface {
  functions: {
    HALF_Q: TypedFunctionDescription<{ encode([]: []): string }>;

    Q: TypedFunctionDescription<{ encode([]: []): string }>;

    verifySignature: TypedFunctionDescription<{
      encode([
        signingPubKeyX,
        pubKeyYParity,
        signature,
        msgHash,
        nonceTimesGeneratorAddress
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;
  };

  events: {};
}

export class SchnorrSECP256K1 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): SchnorrSECP256K1;
  attach(addressOrName: string): SchnorrSECP256K1;
  deployed(): Promise<SchnorrSECP256K1>;

  on(event: EventFilter | string, listener: Listener): SchnorrSECP256K1;
  once(event: EventFilter | string, listener: Listener): SchnorrSECP256K1;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): SchnorrSECP256K1;
  removeAllListeners(eventName: EventFilter | string): SchnorrSECP256K1;
  removeListener(eventName: any, listener: Listener): SchnorrSECP256K1;

  interface: SchnorrSECP256K1Interface;

  functions: {
    HALF_Q(): Promise<BigNumber>;

    Q(): Promise<BigNumber>;

    verifySignature(
      signingPubKeyX: BigNumberish,
      pubKeyYParity: BigNumberish,
      signature: BigNumberish,
      msgHash: BigNumberish,
      nonceTimesGeneratorAddress: string
    ): Promise<boolean>;
  };

  HALF_Q(): Promise<BigNumber>;

  Q(): Promise<BigNumber>;

  verifySignature(
    signingPubKeyX: BigNumberish,
    pubKeyYParity: BigNumberish,
    signature: BigNumberish,
    msgHash: BigNumberish,
    nonceTimesGeneratorAddress: string
  ): Promise<boolean>;

  filters: {};

  estimate: {
    HALF_Q(): Promise<BigNumber>;

    Q(): Promise<BigNumber>;

    verifySignature(
      signingPubKeyX: BigNumberish,
      pubKeyYParity: BigNumberish,
      signature: BigNumberish,
      msgHash: BigNumberish,
      nonceTimesGeneratorAddress: string
    ): Promise<BigNumber>;
  };
}
