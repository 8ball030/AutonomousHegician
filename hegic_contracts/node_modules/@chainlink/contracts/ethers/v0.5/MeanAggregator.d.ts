/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface MeanAggregatorInterface extends Interface {
  functions: {
    fulfill: TypedFunctionDescription<{
      encode([_requestId, _sAId, _oracle, _value]: [
        Arrayish,
        Arrayish,
        string,
        Arrayish
      ]): string;
    }>;

    initiateJob: TypedFunctionDescription<{
      encode([_sAId, _serviceAgreementData]: [Arrayish, Arrayish]): string;
    }>;
  };

  events: {};
}

export class MeanAggregator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): MeanAggregator;
  attach(addressOrName: string): MeanAggregator;
  deployed(): Promise<MeanAggregator>;

  on(event: EventFilter | string, listener: Listener): MeanAggregator;
  once(event: EventFilter | string, listener: Listener): MeanAggregator;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): MeanAggregator;
  removeAllListeners(eventName: EventFilter | string): MeanAggregator;
  removeListener(eventName: any, listener: Listener): MeanAggregator;

  interface: MeanAggregatorInterface;

  functions: {
    fulfill(
      _requestId: Arrayish,
      _sAId: Arrayish,
      _oracle: string,
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    initiateJob(
      _sAId: Arrayish,
      _serviceAgreementData: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  fulfill(
    _requestId: Arrayish,
    _sAId: Arrayish,
    _oracle: string,
    _value: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  initiateJob(
    _sAId: Arrayish,
    _serviceAgreementData: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    fulfill(
      _requestId: Arrayish,
      _sAId: Arrayish,
      _oracle: string,
      _value: Arrayish
    ): Promise<BigNumber>;

    initiateJob(
      _sAId: Arrayish,
      _serviceAgreementData: Arrayish
    ): Promise<BigNumber>;
  };
}
