/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ServiceAgreementConsumerInterface extends Interface {
  functions: {
    fulfill: TypedFunctionDescription<{
      encode([_requestId, _price]: [Arrayish, Arrayish]): string;
    }>;

    requestEthereumPrice: TypedFunctionDescription<{
      encode([_currency]: [string]): string;
    }>;

    currentPrice: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    ChainlinkRequested: TypedEventDescription<{
      encodeTopics([id]: [Arrayish | null]): string[];
    }>;

    ChainlinkFulfilled: TypedEventDescription<{
      encodeTopics([id]: [Arrayish | null]): string[];
    }>;

    ChainlinkCancelled: TypedEventDescription<{
      encodeTopics([id]: [Arrayish | null]): string[];
    }>;
  };
}

export class ServiceAgreementConsumer extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): ServiceAgreementConsumer;
  attach(addressOrName: string): ServiceAgreementConsumer;
  deployed(): Promise<ServiceAgreementConsumer>;

  on(event: EventFilter | string, listener: Listener): ServiceAgreementConsumer;
  once(
    event: EventFilter | string,
    listener: Listener
  ): ServiceAgreementConsumer;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ServiceAgreementConsumer;
  removeAllListeners(eventName: EventFilter | string): ServiceAgreementConsumer;
  removeListener(eventName: any, listener: Listener): ServiceAgreementConsumer;

  interface: ServiceAgreementConsumerInterface;

  functions: {
    fulfill(
      _requestId: Arrayish,
      _price: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    requestEthereumPrice(
      _currency: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    currentPrice(): Promise<string>;
  };

  fulfill(
    _requestId: Arrayish,
    _price: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  requestEthereumPrice(
    _currency: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  currentPrice(): Promise<string>;

  filters: {
    ChainlinkRequested(id: Arrayish | null): EventFilter;

    ChainlinkFulfilled(id: Arrayish | null): EventFilter;

    ChainlinkCancelled(id: Arrayish | null): EventFilter;
  };

  estimate: {
    fulfill(_requestId: Arrayish, _price: Arrayish): Promise<BigNumber>;

    requestEthereumPrice(_currency: string): Promise<BigNumber>;

    currentPrice(): Promise<BigNumber>;
  };
}
