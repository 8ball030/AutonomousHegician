{
	"schemaVersion": "2.0.0",
	"contractName": "SignedSafeMath",
	"compilerOutput": {
		"abi": [],
		"devdoc": {
			"methods": {}
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820b15411af23156eb5571fb4a96327e3195eaa1330cd1b85d0d6a0d8fce7f47f680029",
				"opcodes": "PUSH1 0x4C PUSH1 0x2C PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x0 DUP2 EQ PUSH1 0x1C JUMPI PUSH1 0x1E JUMP JUMPDEST INVALID JUMPDEST POP ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN STOP PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xb1 SLOAD GT 0xaf 0x23 ISZERO PUSH15 0xB5571FB4A96327E3195EAA1330CD1B DUP6 0xd0 0xd6 LOG0 0xd8 0xfc 0xe7 DELEGATECALL PUSH32 0x6800290000000000000000000000000000000000000000000000000000000000 ",
				"sourceMap": "25:500:41:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x73000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820b15411af23156eb5571fb4a96327e3195eaa1330cd1b85d0d6a0d8fce7f47f680029",
				"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xb1 SLOAD GT 0xaf 0x23 ISZERO PUSH15 0xB5571FB4A96327E3195EAA1330CD1B DUP6 0xd0 0xd6 LOG0 0xd8 0xfc 0xe7 DELEGATECALL PUSH32 0x6800290000000000000000000000000000000000000000000000000000000000 ",
				"sourceMap": "25:500:41:-;;;;;;;;"
			},
			"methodIdentifiers": {}
		},
		"metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.4/vendor/SignedSafeMath.sol\":\"SignedSafeMath\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.4/vendor/SignedSafeMath.sol\":{\"keccak256\":\"0xb54cfcbf4f182f55a64fc4debd9cdef3f7ac06d85a95f5c322795fbe4b53a5ce\",\"urls\":[\"bzzr://233863eb6dcdea4299e9f9c8e835d16ae470b9e0ecdddcd5deaafc34e03304fe\"]}},\"version\":1}",
		"userdoc": {
			"methods": {}
		}
	},
	"sources": {
		"vendor/SignedSafeMath.sol": {
			"id": 41
		}
	},
	"sourceCodes": {
		"vendor/SignedSafeMath.sol": "pragma solidity 0.4.24;\n\nlibrary SignedSafeMath {\n\n  /**\n   * @dev Adds two int256s and makes sure the result doesn't overflow. Signed\n   * integers aren't supported by the SafeMath library, thus this method\n   * @param _a The first number to be added\n   * @param _a The second number to be added\n   */\n  function add(int256 _a, int256 _b)\n    internal\n    pure\n    returns (int256)\n  {\n    int256 c = _a + _b;\n    require((_b >= 0 && c >= _a) || (_b < 0 && c < _a), \"SignedSafeMath: addition overflow\");\n\n    return c;\n  }\n}\n"
	},
	"sourceTreeHashHex": "0xb54cfcbf4f182f55a64fc4debd9cdef3f7ac06d85a95f5c322795fbe4b53a5ce",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.4.24+commit.e67f0147.js",
		"settings": {
			"optimizer": {
				"enabled": false
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"userdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap",
						"evm.methodIdentifiers",
						"metadata"
					]
				}
			},
			"remappings": []
		}
	},
	"chains": {}
}