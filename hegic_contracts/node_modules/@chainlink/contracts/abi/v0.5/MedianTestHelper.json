{
	"schemaVersion": "2.0.0",
	"contractName": "MedianTestHelper",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "_list",
						"type": "int256[]"
					}
				],
				"name": "publicGet",
				"outputs": [
					{
						"name": "",
						"type": "int256"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {}
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b506107b6806100206000396000f3fe608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063115efb2014610046575b600080fd5b34801561005257600080fd5b506101096004803603602081101561006957600080fd5b810190808035906020019064010000000081111561008657600080fd5b82018360208201111561009857600080fd5b803590602001918460208302840111640100000000831117156100ba57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929050505061011f565b6040518082815260200191505060405180910390f35b600061012a82610131565b9050919050565b60008082519050600061014e60028361023690919063ffffffff16565b9050600060028381151561015e57fe5b06141561020f576000610179610173866102c9565b83610359565b9050600061019a8661019560018661059290919063ffffffff16565b610359565b90506000600280838115156101ab57fe5b076002858115156101b857fe5b07018115156101c357fe5b059050610203816101f56002858115156101d957fe5b056002878115156101e657fe5b0561061c90919063ffffffff16565b61061c90919063ffffffff16565b95505050505050610231565b61022c8461022760018461059290919063ffffffff16565b610359565b925050505b919050565b600080821115156102af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b600082848115156102bc57fe5b0490508091505092915050565b60608082516040519080825280602002602001820160405280156102fc5781602001602082028038833980820191505090505b50905060008090505b835181101561034f57838181518110151561031c57fe5b90602001906020020151828281518110151561033457fe5b90602001906020020181815250508080600101915050610305565b5080915050919050565b60006060839050600083905060008251905060608160405190808252806020026020018201604052801561039c5781602001602082028038833980820191505090505b5090506060826040519080825280602002602001820160405280156103d05781602001602082028038833980820191505090505b5090506000806000805b60011561058257886103f660028961023690919063ffffffff16565b81518110151561040257fe5b9060200190602002015191506000935060009250600090505b868110156104ed5781898281518110151561043257fe5b90602001906020020151121561048357888181518110151561045057fe5b90602001906020020151868581518110151561046857fe5b906020019060200201818152505083806001019450506104e0565b81898281518110151561049257fe5b9060200190602002015113156104df5788818151811015156104b057fe5b9060200190602002015185848151811015156104c857fe5b906020019060200201818152505082806001019350505b5b808060010191505061041b565b83881115156105105783965061050389876106ef565b809750819a50505061057d565b61052383886106ff90919063ffffffff16565b88111561056b5761054f61054084896106ff90919063ffffffff16565b896106ff90919063ffffffff16565b975082965061055e89866106ef565b809650819a50505061057c565b81995050505050505050505061058c565b5b6103da565b5050505050505050505b92915050565b6000808284019050838110151515610612576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000808284019050600083121580156106355750838112155b8061064b575060008312801561064a57508381125b5b15156106e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f81526020017f770000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8091505092915050565b6060808284915091509250929050565b6000828211151515610779576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b60008284039050809150509291505056fea165627a7a723058207c8a2ab31fc306de7735ca587c8b868cb824a665adbd7c36bf4a4c250c375cf00029",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7B6 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x115EFB20 EQ PUSH2 0x46 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x109 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x11F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH2 0x12A DUP3 PUSH2 0x131 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x14E PUSH1 0x2 DUP4 PUSH2 0x236 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP4 DUP2 ISZERO ISZERO PUSH2 0x15E JUMPI INVALID JUMPDEST MOD EQ ISZERO PUSH2 0x20F JUMPI PUSH1 0x0 PUSH2 0x179 PUSH2 0x173 DUP7 PUSH2 0x2C9 JUMP JUMPDEST DUP4 PUSH2 0x359 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x19A DUP7 PUSH2 0x195 PUSH1 0x1 DUP7 PUSH2 0x592 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x359 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP1 DUP4 DUP2 ISZERO ISZERO PUSH2 0x1AB JUMPI INVALID JUMPDEST SMOD PUSH1 0x2 DUP6 DUP2 ISZERO ISZERO PUSH2 0x1B8 JUMPI INVALID JUMPDEST SMOD ADD DUP2 ISZERO ISZERO PUSH2 0x1C3 JUMPI INVALID JUMPDEST SDIV SWAP1 POP PUSH2 0x203 DUP2 PUSH2 0x1F5 PUSH1 0x2 DUP6 DUP2 ISZERO ISZERO PUSH2 0x1D9 JUMPI INVALID JUMPDEST SDIV PUSH1 0x2 DUP8 DUP2 ISZERO ISZERO PUSH2 0x1E6 JUMPI INVALID JUMPDEST SDIV PUSH2 0x61C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x61C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP6 POP POP POP POP POP POP PUSH2 0x231 JUMP JUMPDEST PUSH2 0x22C DUP5 PUSH2 0x227 PUSH1 0x1 DUP5 PUSH2 0x592 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x359 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT ISZERO ISZERO PUSH2 0x2AF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 0x2BC JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MLOAD PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2FC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 SWAP1 POP JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x34F JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x31C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x334 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD DUP2 DUP2 MSTORE POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x305 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 SWAP1 POP PUSH1 0x0 DUP4 SWAP1 POP PUSH1 0x0 DUP3 MLOAD SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x39C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x60 DUP3 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3D0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x582 JUMPI DUP9 PUSH2 0x3F6 PUSH1 0x2 DUP10 PUSH2 0x236 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x402 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD SWAP2 POP PUSH1 0x0 SWAP4 POP PUSH1 0x0 SWAP3 POP PUSH1 0x0 SWAP1 POP JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x4ED JUMPI DUP2 DUP10 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x432 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD SLT ISZERO PUSH2 0x483 JUMPI DUP9 DUP2 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x450 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x468 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP1 PUSH1 0x1 ADD SWAP5 POP POP PUSH2 0x4E0 JUMP JUMPDEST DUP2 DUP10 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x492 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD SGT ISZERO PUSH2 0x4DF JUMPI DUP9 DUP2 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x4B0 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x4C8 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP1 PUSH1 0x1 ADD SWAP4 POP POP JUMPDEST JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x41B JUMP JUMPDEST DUP4 DUP9 GT ISZERO ISZERO PUSH2 0x510 JUMPI DUP4 SWAP7 POP PUSH2 0x503 DUP10 DUP8 PUSH2 0x6EF JUMP JUMPDEST DUP1 SWAP8 POP DUP2 SWAP11 POP POP POP PUSH2 0x57D JUMP JUMPDEST PUSH2 0x523 DUP4 DUP9 PUSH2 0x6FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP9 GT ISZERO PUSH2 0x56B JUMPI PUSH2 0x54F PUSH2 0x540 DUP5 DUP10 PUSH2 0x6FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP10 PUSH2 0x6FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP8 POP DUP3 SWAP7 POP PUSH2 0x55E DUP10 DUP7 PUSH2 0x6EF JUMP JUMPDEST DUP1 SWAP7 POP DUP2 SWAP11 POP POP POP PUSH2 0x57C JUMP JUMPDEST DUP2 SWAP10 POP POP POP POP POP POP POP POP POP POP PUSH2 0x58C JUMP JUMPDEST JUMPDEST PUSH2 0x3DA JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 0x612 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP PUSH1 0x0 DUP4 SLT ISZERO DUP1 ISZERO PUSH2 0x635 JUMPI POP DUP4 DUP2 SLT ISZERO JUMPDEST DUP1 PUSH2 0x64B JUMPI POP PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x64A JUMPI POP DUP4 DUP2 SLT JUMPDEST JUMPDEST ISZERO ISZERO PUSH2 0x6E5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5369676E6564536166654D6174683A206164646974696F6E206F766572666C6F DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x7700000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 DUP5 SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 0x779 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 SUB SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 PUSH29 0x8A2AB31FC306DE7735CA587C8B868CB824A665ADBD7C36BF4A4C250C37 0x5c CREATE STOP 0x29 ",
				"sourceMap": "50:160:30:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;50:160:30;;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063115efb2014610046575b600080fd5b34801561005257600080fd5b506101096004803603602081101561006957600080fd5b810190808035906020019064010000000081111561008657600080fd5b82018360208201111561009857600080fd5b803590602001918460208302840111640100000000831117156100ba57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929050505061011f565b6040518082815260200191505060405180910390f35b600061012a82610131565b9050919050565b60008082519050600061014e60028361023690919063ffffffff16565b9050600060028381151561015e57fe5b06141561020f576000610179610173866102c9565b83610359565b9050600061019a8661019560018661059290919063ffffffff16565b610359565b90506000600280838115156101ab57fe5b076002858115156101b857fe5b07018115156101c357fe5b059050610203816101f56002858115156101d957fe5b056002878115156101e657fe5b0561061c90919063ffffffff16565b61061c90919063ffffffff16565b95505050505050610231565b61022c8461022760018461059290919063ffffffff16565b610359565b925050505b919050565b600080821115156102af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b600082848115156102bc57fe5b0490508091505092915050565b60608082516040519080825280602002602001820160405280156102fc5781602001602082028038833980820191505090505b50905060008090505b835181101561034f57838181518110151561031c57fe5b90602001906020020151828281518110151561033457fe5b90602001906020020181815250508080600101915050610305565b5080915050919050565b60006060839050600083905060008251905060608160405190808252806020026020018201604052801561039c5781602001602082028038833980820191505090505b5090506060826040519080825280602002602001820160405280156103d05781602001602082028038833980820191505090505b5090506000806000805b60011561058257886103f660028961023690919063ffffffff16565b81518110151561040257fe5b9060200190602002015191506000935060009250600090505b868110156104ed5781898281518110151561043257fe5b90602001906020020151121561048357888181518110151561045057fe5b90602001906020020151868581518110151561046857fe5b906020019060200201818152505083806001019450506104e0565b81898281518110151561049257fe5b9060200190602002015113156104df5788818151811015156104b057fe5b9060200190602002015185848151811015156104c857fe5b906020019060200201818152505082806001019350505b5b808060010191505061041b565b83881115156105105783965061050389876106ef565b809750819a50505061057d565b61052383886106ff90919063ffffffff16565b88111561056b5761054f61054084896106ff90919063ffffffff16565b896106ff90919063ffffffff16565b975082965061055e89866106ef565b809650819a50505061057c565b81995050505050505050505061058c565b5b6103da565b5050505050505050505b92915050565b6000808284019050838110151515610612576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000808284019050600083121580156106355750838112155b8061064b575060008312801561064a57508381125b5b15156106e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f81526020017f770000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8091505092915050565b6060808284915091509250929050565b6000828211151515610779576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b60008284039050809150509291505056fea165627a7a723058207c8a2ab31fc306de7735ca587c8b868cb824a665adbd7c36bf4a4c250c375cf00029",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x115EFB20 EQ PUSH2 0x46 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x109 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x11F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH2 0x12A DUP3 PUSH2 0x131 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x14E PUSH1 0x2 DUP4 PUSH2 0x236 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP4 DUP2 ISZERO ISZERO PUSH2 0x15E JUMPI INVALID JUMPDEST MOD EQ ISZERO PUSH2 0x20F JUMPI PUSH1 0x0 PUSH2 0x179 PUSH2 0x173 DUP7 PUSH2 0x2C9 JUMP JUMPDEST DUP4 PUSH2 0x359 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x19A DUP7 PUSH2 0x195 PUSH1 0x1 DUP7 PUSH2 0x592 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x359 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP1 DUP4 DUP2 ISZERO ISZERO PUSH2 0x1AB JUMPI INVALID JUMPDEST SMOD PUSH1 0x2 DUP6 DUP2 ISZERO ISZERO PUSH2 0x1B8 JUMPI INVALID JUMPDEST SMOD ADD DUP2 ISZERO ISZERO PUSH2 0x1C3 JUMPI INVALID JUMPDEST SDIV SWAP1 POP PUSH2 0x203 DUP2 PUSH2 0x1F5 PUSH1 0x2 DUP6 DUP2 ISZERO ISZERO PUSH2 0x1D9 JUMPI INVALID JUMPDEST SDIV PUSH1 0x2 DUP8 DUP2 ISZERO ISZERO PUSH2 0x1E6 JUMPI INVALID JUMPDEST SDIV PUSH2 0x61C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x61C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP6 POP POP POP POP POP POP PUSH2 0x231 JUMP JUMPDEST PUSH2 0x22C DUP5 PUSH2 0x227 PUSH1 0x1 DUP5 PUSH2 0x592 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x359 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT ISZERO ISZERO PUSH2 0x2AF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 0x2BC JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MLOAD PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2FC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 SWAP1 POP JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x34F JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x31C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x334 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD DUP2 DUP2 MSTORE POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x305 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 SWAP1 POP PUSH1 0x0 DUP4 SWAP1 POP PUSH1 0x0 DUP3 MLOAD SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x39C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x60 DUP3 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3D0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x582 JUMPI DUP9 PUSH2 0x3F6 PUSH1 0x2 DUP10 PUSH2 0x236 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x402 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD SWAP2 POP PUSH1 0x0 SWAP4 POP PUSH1 0x0 SWAP3 POP PUSH1 0x0 SWAP1 POP JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x4ED JUMPI DUP2 DUP10 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x432 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD SLT ISZERO PUSH2 0x483 JUMPI DUP9 DUP2 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x450 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x468 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP1 PUSH1 0x1 ADD SWAP5 POP POP PUSH2 0x4E0 JUMP JUMPDEST DUP2 DUP10 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x492 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD SGT ISZERO PUSH2 0x4DF JUMPI DUP9 DUP2 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x4B0 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x4C8 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP1 PUSH1 0x1 ADD SWAP4 POP POP JUMPDEST JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x41B JUMP JUMPDEST DUP4 DUP9 GT ISZERO ISZERO PUSH2 0x510 JUMPI DUP4 SWAP7 POP PUSH2 0x503 DUP10 DUP8 PUSH2 0x6EF JUMP JUMPDEST DUP1 SWAP8 POP DUP2 SWAP11 POP POP POP PUSH2 0x57D JUMP JUMPDEST PUSH2 0x523 DUP4 DUP9 PUSH2 0x6FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP9 GT ISZERO PUSH2 0x56B JUMPI PUSH2 0x54F PUSH2 0x540 DUP5 DUP10 PUSH2 0x6FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP10 PUSH2 0x6FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP8 POP DUP3 SWAP7 POP PUSH2 0x55E DUP10 DUP7 PUSH2 0x6EF JUMP JUMPDEST DUP1 SWAP7 POP DUP2 SWAP11 POP POP POP PUSH2 0x57C JUMP JUMPDEST DUP2 SWAP10 POP POP POP POP POP POP POP POP POP POP PUSH2 0x58C JUMP JUMPDEST JUMPDEST PUSH2 0x3DA JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 0x612 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP PUSH1 0x0 DUP4 SLT ISZERO DUP1 ISZERO PUSH2 0x635 JUMPI POP DUP4 DUP2 SLT ISZERO JUMPDEST DUP1 PUSH2 0x64B JUMPI POP PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x64A JUMPI POP DUP4 DUP2 SLT JUMPDEST JUMPDEST ISZERO ISZERO PUSH2 0x6E5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5369676E6564536166654D6174683A206164646974696F6E206F766572666C6F DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x7700000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 DUP5 SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 0x779 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 SUB SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 PUSH29 0x8A2AB31FC306DE7735CA587C8B868CB824A665ADBD7C36BF4A4C250C37 0x5c CREATE STOP 0x29 ",
				"sourceMap": "50:160:30:-;;;;;;;;;;;;;;;;;;;;;;;;81:126;;8:9:-1;5:2;;;30:1;27;20:12;5:2;81:126:30;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;81:126:30;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;81:126:30;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;81:126:30;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;81:126:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;81:126:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;156:6;179:23;196:5;179:16;:23::i;:::-;172:30;;81:126;;;:::o;377:633:3:-;454:6;470:20;493:5;:12;470:35;;511:19;533;550:1;533:12;:16;;:19;;;;:::i;:::-;511:41;;582:1;577;562:12;:16;;;;;;;;:21;558:448;;;593:14;610:37;622:11;627:5;622:4;:11::i;:::-;635;610;:37::i;:::-;593:54;;655:14;672:38;684:5;691:18;707:1;691:11;:15;;:18;;;;:::i;:::-;672:11;:38::i;:::-;655:55;;746:16;795:1;790;780:7;:11;;;;;;;;776:1;766:7;:11;;;;;;;;:25;765:31;;;;;;;;746:50;;811:45;846:9;811:30;839:1;829:7;:11;;;;;;;;822:1;812:7;:11;;;;;;;;811:17;;:30;;;;:::i;:::-;:34;;:45;;;;:::i;:::-;804:52;;;;;;;;;558:448;933:38;945:5;952:18;968:1;952:11;:15;;:18;;;;:::i;:::-;933:11;:38::i;:::-;926:45;;;;377:633;;;;:::o;2488:304:36:-;2546:7;2635:1;2631;:5;2623:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2673:9;2689:1;2685;:5;;;;;;;;2673:17;;2786:1;2779:8;;;2488:304;;;;:::o;2647:250:3:-;2717:15;2742:21;2779:5;:12;2766:26;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;2766:26:3;;;;2742:50;;2803:9;2815:1;2803:13;;2798:77;2822:5;:12;2818:1;:16;2798:77;;;2860:5;2866:1;2860:8;;;;;;;;;;;;;;;;;;2849:5;2855:1;2849:8;;;;;;;;;;;;;;;;;:19;;;;;2836:3;;;;;;;2798:77;;;;2887:5;2880:12;;;2647:250;;;:::o;1286:893::-;1373:6;1389:17;1409:2;1389:22;;1417:9;1429:2;1417:14;;1437:12;1452:1;:8;1437:23;;1466:18;1500:4;1487:18;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;1487:18:3;;;;1466:39;;1511:18;1545:4;1532:18;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;1532:18:3;;;;1511:39;;1556:13;1575;1594:12;1612:9;1628:547;1635:4;1628:547;;;1657:1;1659:11;1668:1;1659:4;:8;;:11;;;;:::i;:::-;1657:14;;;;;;;;;;;;;;;;;;1649:22;;1687:1;1679:9;;1704:1;1696:9;;1722:1;1718:5;;1713:203;1729:4;1725:1;:8;1713:203;;;1761:5;1754:1;1756;1754:4;;;;;;;;;;;;;;;;;;:12;1750:158;;;1792:1;1794;1792:4;;;;;;;;;;;;;;;;;;1780:2;1783:5;1780:9;;;;;;;;;;;;;;;;;:16;;;;;1808:7;;;;;;;1750:158;;;1843:5;1836:1;1838;1836:4;;;;;;;;;;;;;;;;;;:12;1832:76;;;1874:1;1876;1874:4;;;;;;;;;;;;;;;;;;1862:2;1865:5;1862:9;;;;;;;;;;;;;;;;;:16;;;;;1890:7;;;;;;;1832:76;1750:158;1735:3;;;;;;;1713:203;;;1932:5;1927:1;:10;;1923:246;;;1956:5;1949:12;;1981:11;1986:1;1989:2;1981:4;:11::i;:::-;1971:21;;;;;;;;1923:246;;;2016:15;2025:5;2016:4;:8;;:15;;;;:::i;:::-;2011:1;:21;2007:162;;;2048:22;2054:15;2063:5;2054:4;:8;;:15;;;;:::i;:::-;2048:1;:5;;:22;;;;:::i;:::-;2044:26;;2087:5;2080:12;;2112:11;2117:1;2120:2;2112:4;:11::i;:::-;2102:21;;;;;;;;2007:162;;;2155:5;2148:12;;;;;;;;;;;;;2007:162;1923:246;1628:547;;;1286:893;;;;;;;;;;;;;;:::o;822:162:36:-;880:7;895:9;911:1;907;:5;895:17;;931:1;926;:6;;918:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;978:1;971:8;;;822:162;;;;:::o;305:284:37:-;375:6;457:8;473:2;468;:7;457:18;;496:1;490:2;:7;;:18;;;;;506:2;501:1;:7;;490:18;489:42;;;;519:1;514:2;:6;:16;;;;;528:2;524:1;:6;514:16;489:42;481:88;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;583:1;576:8;;;305:284;;;;:::o;2369:149:3:-;2456:15;2473;2506:2;2510;2498:15;;;;2369:149;;;;;:::o;1236:165:36:-;1294:7;1322:1;1317;:6;;1309:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1364:9;1380:1;1376;:5;1364:17;;1395:1;1388:8;;;1236:165;;;;:::o"
			},
			"methodIdentifiers": {
				"publicGet(int256[])": "115efb20"
			}
		},
		"metadata": "{\"compiler\":{\"version\":\"0.5.0+commit.1d4f565a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"_list\",\"type\":\"int256[]\"}],\"name\":\"publicGet\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.5/tests/MedianTestHelper.sol\":\"MedianTestHelper\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.5/Median.sol\":{\"keccak256\":\"0x6491c1e3e3b8e12f5f4add057dbc1282aadffd3f0dfbed0046baa4b2a41e27c7\",\"urls\":[\"bzzr://1cd04dd6f0285e38b54e63aceb32ac132f9da0f532e8668561a625b2b429c6a6\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.5/tests/MedianTestHelper.sol\":{\"keccak256\":\"0x8c06f4f700937f967fb14c8108362a5a7af85a0f1a75742b04aa88bf41dad0ac\",\"urls\":[\"bzzr://2ed4684e27a3ddf9888a0c06bf8eb1c0de3b2582d89811436714da9a508cbd24\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.5/vendor/SafeMath.sol\":{\"keccak256\":\"0x3c9aed70447b5aafb455bf2b124405f87979c19e628553c194f741660197265b\",\"urls\":[\"bzzr://560515f0c0118bae3cb38a64c2b67a75a80e87647618ba02f1e614a113cdfeea\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.5/vendor/SignedSafeMath.sol\":{\"keccak256\":\"0x2695f6b8893d0333f719b12156bb8e2c2589c431fdf7241aca428bd2b5564dd4\",\"urls\":[\"bzzr://b82f0e4c561256ead4b559e2bc4585731001e99b572702849cb12b918c213fe8\"]}},\"version\":1}",
		"userdoc": {
			"methods": {}
		}
	},
	"sources": {
		"tests/MedianTestHelper.sol": {
			"id": 30
		},
		"Median.sol": {
			"id": 3
		},
		"vendor/SafeMath.sol": {
			"id": 36
		},
		"vendor/SignedSafeMath.sol": {
			"id": 37
		}
	},
	"sourceCodes": {
		"tests/MedianTestHelper.sol": "pragma solidity ^0.5.0;\n\nimport \"../Median.sol\";\n\ncontract MedianTestHelper {\n\n  function publicGet(int256[] memory _list)\n    public\n    pure\n    returns (int256)\n  {\n    return Median.calculate(_list);\n  }\n\n}\n",
		"Median.sol": "pragma solidity ^0.5.0;\n\nimport \"./vendor/SafeMath.sol\";\nimport \"./vendor/SignedSafeMath.sol\";\n\nlibrary Median {\n  using SafeMath for uint256;\n  using SignedSafeMath for int256;\n\n  /**\n   * @dev Returns the sorted middle, or the average of the two middle indexed \n   * items if the array has an even number of elements\n   * @param _list The list of elements to compare\n   */\n  function calculate(int256[] memory _list)\n    internal\n    pure\n    returns (int256)\n  {\n    uint256 answerLength = _list.length;\n    uint256 middleIndex = answerLength.div(2);\n    if (answerLength % 2 == 0) {\n      int256 median1 = quickselect(copy(_list), middleIndex);\n      int256 median2 = quickselect(_list, middleIndex.add(1)); // quickselect is 1 indexed\n      int256 remainder = (median1 % 2 + median2 % 2) / 2;\n      return (median1 / 2).add(median2 / 2).add(remainder); // signed integers are not supported by SafeMath\n    } else {\n      return quickselect(_list, middleIndex.add(1)); // quickselect is 1 indexed\n    }\n  }\n\n  /**\n   * @dev Returns the kth value of the ordered array\n   * See: http://www.cs.yale.edu/homes/aspnes/pinewiki/QuickSelect.html\n   * @param _a The list of elements to pull from\n   * @param _k The index, 1 based, of the elements you want to pull from when ordered\n   */\n  function quickselect(int256[] memory _a, uint256 _k)\n    private\n    pure\n    returns (int256)\n  {\n    int256[] memory a = _a;\n    uint256 k = _k;\n    uint256 aLen = a.length;\n    int256[] memory a1 = new int256[](aLen);\n    int256[] memory a2 = new int256[](aLen);\n    uint256 a1Len;\n    uint256 a2Len;\n    int256 pivot;\n    uint256 i;\n\n    while (true) {\n      pivot = a[aLen.div(2)];\n      a1Len = 0;\n      a2Len = 0;\n      for (i = 0; i < aLen; i++) {\n        if (a[i] < pivot) {\n          a1[a1Len] = a[i];\n          a1Len++;\n        } else if (a[i] > pivot) {\n          a2[a2Len] = a[i];\n          a2Len++;\n        }\n      }\n      if (k <= a1Len) {\n        aLen = a1Len;\n        (a, a1) = swap(a, a1);\n      } else if (k > (aLen.sub(a2Len))) {\n        k = k.sub(aLen.sub(a2Len));\n        aLen = a2Len;\n        (a, a2) = swap(a, a2);\n      } else {\n        return pivot;\n      }\n    }\n  }\n\n  /**\n   * @dev Swaps the pointers to two uint256 arrays in memory\n   * @param _a The pointer to the first in memory array\n   * @param _b The pointer to the second in memory array\n   */\n  function swap(int256[] memory _a, int256[] memory _b)\n    private\n    pure\n    returns(int256[] memory, int256[] memory)\n  {\n    return (_b, _a);\n  }\n\n  /**\n   * @dev Makes an in memory copy of the array passed in\n   * @param _list The pointer to the array to be copied\n   */\n  function copy(int256[] memory _list)\n    private\n    pure\n    returns(int256[] memory)\n  {\n    int256[] memory list2 = new int256[](_list.length);\n    for (uint256 i = 0; i < _list.length; i++) {\n      list2[i] = _list[i];\n    }\n    return list2;\n  }\n\n}\n",
		"vendor/SafeMath.sol": "pragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n  /**\n    * @dev Returns the addition of two unsigned integers, reverting on\n    * overflow.\n    *\n    * Counterpart to Solidity's `+` operator.\n    *\n    * Requirements:\n    * - Addition cannot overflow.\n    */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a, \"SafeMath: addition overflow\");\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the subtraction of two unsigned integers, reverting on\n    * overflow (when the result is negative).\n    *\n    * Counterpart to Solidity's `-` operator.\n    *\n    * Requirements:\n    * - Subtraction cannot overflow.\n    */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a, \"SafeMath: subtraction overflow\");\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the multiplication of two unsigned integers, reverting on\n    * overflow.\n    *\n    * Counterpart to Solidity's `*` operator.\n    *\n    * Requirements:\n    * - Multiplication cannot overflow.\n    */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, \"SafeMath: multiplication overflow\");\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the integer division of two unsigned integers. Reverts on\n    * division by zero. The result is rounded towards zero.\n    *\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\n    * uses an invalid opcode to revert (consuming all remaining gas).\n    *\n    * Requirements:\n    * - The divisor cannot be zero.\n    */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Solidity only automatically asserts when dividing by 0\n    require(b > 0, \"SafeMath: division by zero\");\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n    * Reverts when dividing by zero.\n    *\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\n    * invalid opcode to revert (consuming all remaining gas).\n    *\n    * Requirements:\n    * - The divisor cannot be zero.\n    */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0, \"SafeMath: modulo by zero\");\n    return a % b;\n  }\n}\n",
		"vendor/SignedSafeMath.sol": "pragma solidity ^0.5.0;\n\nlibrary SignedSafeMath {\n\n  /**\n   * @dev Adds two int256s and makes sure the result doesn't overflow. Signed\n   * integers aren't supported by the SafeMath library, thus this method\n   * @param _a The first number to be added\n   * @param _a The second number to be added\n   */\n  function add(int256 _a, int256 _b)\n    internal\n    pure\n    returns (int256)\n  {\n    // solium-disable-next-line zeppelin/no-arithmetic-operations\n    int256 c = _a + _b;\n    require((_b >= 0 && c >= _a) || (_b < 0 && c < _a), \"SignedSafeMath: addition overflow\");\n\n    return c;\n  }\n}"
	},
	"sourceTreeHashHex": "0x723093009848eaaf24df1d64bc4347e5f36fcce5044f5534a3212e37e1fe4d14",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.0+commit.1d4f565a.js",
		"settings": {
			"optimizer": {
				"enabled": false
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"userdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap",
						"evm.methodIdentifiers",
						"metadata"
					]
				}
			},
			"remappings": []
		}
	},
	"chains": {}
}