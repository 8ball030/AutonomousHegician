{
	"schemaVersion": "2.0.0",
	"contractName": "Median",
	"compilerOutput": {
		"abi": [],
		"devdoc": {
			"methods": {}
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d91f28512bebabfc56c7f1ec4c846cb4277b811c55ceb664527ab83e9b729e6364736f6c63430006020033",
				"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD9 0x1F 0x28 MLOAD 0x2B 0xEB 0xAB 0xFC JUMP 0xC7 CALL 0xEC 0x4C DUP5 PUSH13 0xB4277B811C55CEB664527AB83E SWAP12 PUSH19 0x9E6364736F6C63430006020033000000000000 ",
				"sourceMap": "93:7657:3:-:0;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d91f28512bebabfc56c7f1ec4c846cb4277b811c55ceb664527ab83e9b729e6364736f6c63430006020033",
				"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD9 0x1F 0x28 MLOAD 0x2B 0xEB 0xAB 0xFC JUMP 0xC7 CALL 0xEC 0x4C DUP5 PUSH13 0xB4277B811C55CEB664527AB83E SWAP12 PUSH19 0x9E6364736F6C63430006020033000000000000 ",
				"sourceMap": "93:7657:3:-:0;;;;;;;;"
			},
			"methodIdentifiers": {}
		},
		"metadata": "{\"compiler\":{\"version\":\"0.6.2+commit.bacdbe57\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/Median.sol\":\"Median\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/Median.sol\":{\"keccak256\":\"0x269f40d91665ff1d4bed46d380e1ce7cb5f75f2e91a51b6e0de3bafec84e2250\",\"urls\":[\"bzz-raw://36c61387a02ce86e32e93ec894b7f13814d1442dd18e7f11fd93f49aa29560a8\",\"dweb:/ipfs/QmZnE2oRUvRzef9GUVz6CGasPbDMr8bK2HPt4tZaDGscSD\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/dev/SignedSafeMath.sol\":{\"keccak256\":\"0xf689587079a0f497bb589d48aa5bae4937f646ac7bc39a5a8b4347313138a394\",\"urls\":[\"bzz-raw://1092ac2421c5d44d6643fc52dc74c3d7577bd0ad6e176f7c43250004a8b0d606\",\"dweb:/ipfs/Qma8gpmqa5bKfM2Am9kqty3Xrg5XKjFd39SJgnKG2FMVzL\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/vendor/SafeMath.sol\":{\"keccak256\":\"0x95dbe2dd5ab8682b99bc3d7d297b621d4237442da160f78d3323ee5c4a06ded3\",\"urls\":[\"bzz-raw://d753308ff4eb43fba6f9ede371a33f707c5818350770dcb078a7d78ac8251361\",\"dweb:/ipfs/Qme64eYKWoTQiP3WhqGHoMqrENNZ9L8SdBLQ2hx5SmzUda\"]}},\"version\":1}",
		"userdoc": {
			"methods": {}
		}
	},
	"sources": {
		"Median.sol": {
			"id": 3
		},
		"vendor/SafeMath.sol": {
			"id": 31
		},
		"dev/SignedSafeMath.sol": {
			"id": 12
		}
	},
	"sourceCodes": {
		"Median.sol": "pragma solidity ^0.6.0;\n\nimport \"./vendor/SafeMath.sol\";\nimport \"./dev/SignedSafeMath.sol\";\n\nlibrary Median {\n  using SignedSafeMath for int256;\n\n  int256 constant intMax = 57896044618658097711785492504343953926634992332820282019728792003956564819967;\n\n  /**\n   * @notice Returns the sorted middle, or the average of the two middle indexed items if the\n   * array has an even number of elements.\n   * @dev The list passed as an argument isn't modified.\n   * @dev This algorithm has expected runtime O(n), but for adversarially chosen inputs\n   * the runtime is O(n^2).\n   * @param list The list of elements to compare\n   */\n  function calculate(int256[] memory list)\n    internal\n    pure\n    returns (int256)\n  {\n    require(0 < list.length, \"list must not be empty\");\n    if (list.length <= 9) {\n      return shortList(list);\n    } else {\n      return longList(copy(list));\n    }\n  }\n\n  /**\n   * @notice See documentation for function calculate.\n   * @dev The list passed as an argument may be permuted.\n   */\n  function calculateInplace(int256[] memory list)\n    internal\n    pure\n    returns (int256)\n  {\n    require(0 < list.length, \"list must not be empty\");\n    if (list.length <= 9) {\n      return shortList(list);\n    } else {\n      return longList(list);\n    }\n  }\n\n  /**\n   * @notice Optimized median computation for lists of length at most 9\n   * @dev Assumes that 0 < list.len <= 9\n   * @dev Does not modify list\n   */\n  function shortList(int256[] memory list) private pure returns (int256) {\n    // Uses an optimal sorting network (https://en.wikipedia.org/wiki/Sorting_network)\n    // for lists of length 9. Network layout is taken from https://stackoverflow.com/a/46801450\n\n    uint256 len = list.length;\n    int256 x0 = list[0];\n    if (len == 1) {return x0;}\n    // --- end of subnetwork for lists of length <= 1\n    int256 x1 = list[1];\n    if (x0 > x1) {(x0, x1) = (x1, x0);}\n    if (len == 2) {return SignedSafeMath.avg(x0, x1);}\n    // --- end of subnetwork for lists of length <= 2\n    int256 x2 = list[2];\n    if (x1 > x2) {(x1, x2) = (x2, x1);}\n    if (x0 > x1) {(x0, x1) = (x1, x0);}\n    if (len == 3) {return x1;}\n    // --- end of subnetwork for lists of length <= 3\n    int256 x3 = list[3];\n    int256 x4 = 4 < len ? list[4] : intMax;\n    int256 x5 = 5 < len ? list[5] : intMax;\n    int256 x6 = 6 < len ? list[6] : intMax;\n    int256 x7 = 7 < len ? list[7] : intMax;\n    int256 x8 = 8 < len ? list[8] : intMax;\n    if (x3 > x4) {(x3, x4) = (x4, x3);}\n    if (x6 > x7) {(x6, x7) = (x7, x6);}\n    if (x4 > x5) {(x4, x5) = (x5, x4);}\n    if (x7 > x8) {(x7, x8) = (x8, x7);}\n    if (x3 > x4) {(x3, x4) = (x4, x3);}\n    if (x6 > x7) {(x6, x7) = (x7, x6);}\n    if (x0 > x3) {(x0, x3) = (x3, x0);}\n    if (x3 > x6) {(x3, x6) = (x6, x3);}\n    if (x0 > x3) {(x0, x3) = (x3, x0);}\n    if (x1 > x4) {(x1, x4) = (x4, x1);}\n    if (x4 > x7) {(x4, x7) = (x7, x4);}\n    if (x1 > x4) {(x1, x4) = (x4, x1);}\n    if (x5 > x8) {(x5, x8) = (x8, x5);}\n    if (x2 > x5) {(x2, x5) = (x5, x2);}\n    if (x2 > x4) {(x2, x4) = (x4, x2);}\n    if (x4 > x6) {(x4, x6) = (x6, x4);}\n    if (x2 > x4) {(x2, x4) = (x4, x2);}\n    if (x1 > x3) {(x1, x3) = (x3, x1);}\n    if (x2 > x3) {(x2, x3) = (x3, x2);}\n    // Since we don't care about fully sorting list, but only want the median,\n    // some unnecessary comparators have been commented out below.\n    // if (x5 > x8) {(x5, x8) = (x8, x5);}\n    // if (x5 > x7) {(x5, x7) = (x7, x5);}\n    // if (x5 > x6) {(x5, x6) = (x6, x5);}\n    if (len == 4) {return SignedSafeMath.avg(x1, x2);}\n    if (len == 5) {return x2;}\n    if (len == 6) {return SignedSafeMath.avg(x2, x3);}\n    if (len == 7) {return x3;}\n    if (len == 8) {return SignedSafeMath.avg(x3, x4);}\n    if (len == 9) {return x4;}\n    revert(\"list.length > 9\");\n  }\n\n  /**\n   * @notice Median computation for lists of any length\n   */\n  function longList(int256[] memory list)\n    private\n    pure\n    returns (int256)\n  {\n    uint256 len = list.length;\n    uint256 middleIndex = len / 2;\n    if (len % 2 == 0) {\n      int256 median1;\n      int256 median2;\n      (median1, median2) = quickselectTwo(list, 0, len - 1, middleIndex - 1, middleIndex);\n      return SignedSafeMath.avg(median1, median2);\n    } else {\n      return quickselect(list, 0, len - 1, middleIndex);\n    }\n  }\n\n  /**\n   * @notice Selects the k-th ranked element from list, looking only at indices between lo and hi\n   * (inclusive). Modifies list in-place.\n   */\n  function quickselect(int256[] memory list, uint lo, uint hi, uint k)\n    private\n    pure\n    returns (int256)\n  {\n    require(lo <= k);\n    require(k <= hi);\n    while (lo < hi) {\n      uint pivotIndex = partition(list, lo, hi);\n      if (k <= pivotIndex) {\n        // since pivotIndex < (original hi passed to partition),\n        // termination is guaranteed in this case\n        hi = pivotIndex;\n      } else {\n        // since (original lo passed to partition) <= pivotIndex,\n        // termination is guaranteed in this case\n        lo = pivotIndex + 1;\n      }\n    }\n    return list[lo];\n  }\n\n  /**\n   * @notice Selects the k1-th and k2-th ranked elements from list, looking only at indices between\n   * lo and hi (inclusive). Modifies list in-place.\n   */\n  function quickselectTwo(int256[] memory list, uint lo, uint hi, uint k1, uint k2)\n    internal\n    pure\n    returns (int256, int256)\n  {\n    require(k1 < k2);\n    require(lo <= k1 && k1 <= hi);\n    require(lo <= k2 && k2 <= hi);\n\n    while (true) {\n      uint pivotIdx = partition(list, lo, hi);\n      if (k2 <= pivotIdx) {\n        hi = pivotIdx;\n      } else if (pivotIdx < k1) {\n        lo = pivotIdx + 1;\n      } else {\n        assert(k1 <= pivotIdx && pivotIdx < k2);\n        int256 r1 = quickselect(list, lo, pivotIdx, k1);\n        int256 r2 = quickselect(list, pivotIdx + 1, hi, k2);\n        return (r1, r2);\n      }\n    }\n  }\n\n  /**\n   * @notice Partitions list in-place using Hoare's partitioning scheme.\n   * Only elements of list between indices lo and hi (inclusive) will be modified.\n   * Returns an index i, such that:\n   * - lo <= i < hi\n   * - forall j in [lo, i]. list[j] <= list[i]\n   * - forall j in [i, hi]. list[i] <= list[j]\n   */\n  function partition(int256[] memory list, uint lo, uint hi)\n    private\n    pure\n    returns (uint256)\n  {\n    // We don't care about overflow of the addition, because it would require a list\n    // larger than any feasible computer's memory.\n    int256 pivot = list[(lo + hi) / 2];\n    lo -= 1; // this can underflow. that's intentional.\n    hi += 1;\n    while (true) {\n      do {\n        lo += 1;\n      } while (list[lo] < pivot);\n      do {\n        hi -= 1;\n      } while (list[hi] > pivot);\n      if (lo < hi) {\n        (list[lo], list[hi]) = (list[hi], list[lo]);\n      } else {\n        // Let orig_lo and orig_hi be the original values of lo and hi passed to partition.\n        // Then, hi < orig_hi, because hi decreases *strictly* monotonically\n        // in each loop iteration and\n        // - either list[orig_hi] > pivot, in which case the first loop iteration\n        //   will achieve hi < orig_hi;\n        // - or list[orig_hi] <= pivot, in which case at least two loop iterations are\n        //   needed:\n        //   - lo will have to stop at least once in the interval\n        //     [orig_lo, (orig_lo + orig_hi)/2]\n        //   - (orig_lo + orig_hi)/2 < orig_hi\n        return hi;\n      }\n    }\n  }\n\n  /**\n   * @notice Makes an in-memory copy of the array passed in\n   * @param list Reference to the array to be copied\n   */\n  function copy(int256[] memory list)\n    private\n    pure\n    returns(int256[] memory)\n  {\n    int256[] memory list2 = new int256[](list.length);\n    for (uint256 i = 0; i < list.length; i++) {\n      list2[i] = list[i];\n    }\n    return list2;\n  }\n}\n",
		"vendor/SafeMath.sol": "pragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n  /**\n    * @dev Returns the addition of two unsigned integers, reverting on\n    * overflow.\n    *\n    * Counterpart to Solidity's `+` operator.\n    *\n    * Requirements:\n    * - Addition cannot overflow.\n    */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a, \"SafeMath: addition overflow\");\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the subtraction of two unsigned integers, reverting on\n    * overflow (when the result is negative).\n    *\n    * Counterpart to Solidity's `-` operator.\n    *\n    * Requirements:\n    * - Subtraction cannot overflow.\n    */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a, \"SafeMath: subtraction overflow\");\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the multiplication of two unsigned integers, reverting on\n    * overflow.\n    *\n    * Counterpart to Solidity's `*` operator.\n    *\n    * Requirements:\n    * - Multiplication cannot overflow.\n    */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, \"SafeMath: multiplication overflow\");\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the integer division of two unsigned integers. Reverts on\n    * division by zero. The result is rounded towards zero.\n    *\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\n    * uses an invalid opcode to revert (consuming all remaining gas).\n    *\n    * Requirements:\n    * - The divisor cannot be zero.\n    */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Solidity only automatically asserts when dividing by 0\n    require(b > 0, \"SafeMath: division by zero\");\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n    * Reverts when dividing by zero.\n    *\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\n    * invalid opcode to revert (consuming all remaining gas).\n    *\n    * Requirements:\n    * - The divisor cannot be zero.\n    */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0, \"SafeMath: modulo by zero\");\n    return a % b;\n  }\n}\n",
		"dev/SignedSafeMath.sol": "pragma solidity ^0.6.0;\n\nlibrary SignedSafeMath {\n\n  /**\n   * @dev Adds two int256s and makes sure the result doesn't overflow. Signed\n   * integers aren't supported by the SafeMath library, thus this method\n   * @param _a The first number to be added\n   * @param _a The second number to be added\n   */\n  function add(int256 _a, int256 _b)\n    internal\n    pure\n    returns (int256)\n  {\n    // solium-disable-next-line zeppelin/no-arithmetic-operations\n    int256 c = _a + _b;\n    require((_b >= 0 && c >= _a) || (_b < 0 && c < _a), \"SignedSafeMath: addition overflow\");\n\n    return c;\n  }\n\n  /**\n   * @notice Computes average of two signed integers, ensuring that the computation\n   * doesn't overflow.\n   * @dev If the result is not an integer, it is rounded towards zero. For example,\n   * avg(-3, -4) = -3\n   */\n  function avg(int256 _a, int256 _b)\n    internal\n    pure\n    returns (int256)\n  {\n    int256 remainder = (_a % 2 + _b % 2) / 2;\n    return add(add(_a / 2, _b / 2), remainder);\n  }\n}\n"
	},
	"sourceTreeHashHex": "0xa20e7c184718b8c879daa69f489da7e9e2b8e6e9730a11277c28986e9dbecd77",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.6.2+commit.bacdbe57.js",
		"settings": {
			"optimizer": {
				"enabled": false
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"userdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap",
						"evm.methodIdentifiers",
						"metadata"
					]
				}
			},
			"remappings": []
		}
	},
	"chains": {}
}