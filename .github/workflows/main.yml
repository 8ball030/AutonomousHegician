# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  common_checks_1:
    continue-on-error: False
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-python@master
        with:
          python-version: 3.6
      - name: Install dependencies (ubuntu-latest)
        run: |
          sudo apt-get update --fix-missing
          sudo apt-get autoremove
          sudo apt-get autoclean
          cd agents
          pip install pipenv
      - name: Pipenv lock
        run: pipenv lock

  common_checks_2:
    continue-on-error: False
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-python@master
        with:
          python-version: 3.6
      - uses: actions/setup-go@master
        with:
          go-version: '^1.14.0'
      - name: Install dependencies (ubuntu-latest)
        run: |
          sudo apt-get update --fix-missing
          sudo apt-get autoremove
          sudo apt-get autoclean
          pip install bandit==1.6.2 black==20.8b1 isort==5.6.4 flake8==3.8.4 mypy==0.790 vulture==2.1
      - name: Black check
        working-directory: ./agents
        run: black --check autonomous_hegician/contracts autonomous_hegician/skills hegic_deployer/contracts hegic_deployer/skills scripts tests
      - name: Isort check
        working-directory: ./agents
        run: isort --check autonomous_hegician/contracts autonomous_hegician/skills hegic_deployer/contracts hegic_deployer/skills scripts tests
      - name: Flake8 check
        working-directory: ./agents
        run: flake8 autonomous_hegician/contracts autonomous_hegician/skills hegic_deployer/contracts hegic_deployer/skills scripts tests
      - name: Static type check
        working-directory: ./agents
        run: |
          mypy autonomous_hegician/contracts autonomous_hegician/skills
          mypy hegic_deployer/contracts hegic_deployer/skills
      - name: Vulture check
        working-directory: ./agents
        run: |
          vulture autonomous_hegician/skills/option_management whitelist.py
          vulture hegic_deployer/skills/hegic_deployer whitelist.py
      - name: Bandit check
        working-directory: ./agents
        run: |
          bandit -s B104 -r autonomous_hegician/contracts autonomous_hegician/skills hegic_deployer/contracts hegic_deployer/skills

  integration_tests:
    continue-on-error: True
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest,  windows-latest]
        python_version: [3.6]
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-python@master
        with:
          python-version: ${{ matrix.python_version }}
      - uses: actions/setup-go@master
        with:
          go-version: '^1.14.0'
      - if: matrix.os == 'ubuntu-latest'
        name: Install dependencies (ubuntu-latest)
        run: |
          sudo apt-get update --fix-missing
          sudo apt-get autoremove
          cd agents
          pip install pipenv
          cd ..
      # - if: matrix.os == 'macos-latest' # not working due to docker licensing issue
      #   name: Install dependencies (macos-latest)
      #   run: |
      #     cd agents
      #     pip install pipenv
      #     cd ..
      - name: All tests
        working-directory: ./
        run: |
          python main.py -o 1
  frontend_tests:
    continue-on-error: True
    runs-on: ${{ matrix.os }}
    env:
      CI: false
    strategy:
      matrix:
        os: [ubuntu-latest] # macos-latest] # windows-latest]
        node-version: [12.x, 14.x]
    timeout-minutes: 20
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: |
        cd frontend
        npm ci
    - run: |
        cd frontend
        npm run build --if-present
